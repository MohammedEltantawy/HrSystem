using System;using System.Linq;using System.Linq.Expressions;using System.Threading.Tasks;using Microsoft.EntityFrameworkCore;using System.Linq.Dynamic.Core;using System.Collections.Generic;using HrSystem.Infrastructure.Context;

namespace HrSystem.InfraStructure.Repositories{    public class GenericRepository<T> : IGenericRepository<T> where T : class    {        private DbSet<T> table = null;        public HrSystemContext _HrSystemContext;        public GenericRepository(HrSystemContext HrSystemContext)        {            _HrSystemContext = HrSystemContext;            table = _HrSystemContext.Set<T>();            _HrSystemContext.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;        }        public IQueryable<T> GetAll(List<Expression<Func<T, bool>>> predicateList = null)        {            var query = table.AsQueryable();            if (predicateList != null)            {                foreach (var pred in predicateList)                {                    if (pred != null)                    {                        query = query.Where(pred);                    }                }            }            return query;        }        public IQueryable<T> GetAllWithRelated(List<Expression<Func<T, bool>>> predicateList, params Expression<Func<T, object>>[] expressionList)        {            var query = GetAll(predicateList);            if (expressionList != null)            {                {                    foreach (var expression in expressionList)                    {                        query = query.Include(expression);                    }                }            }            return query;        }        public IQueryable<T> GetAllWithRelatedandPaginated(bool? sortOrderDir, string? orderBy, int? pageIndex, int? pageSize,                        List<Expression<Func<T, bool>>> predicateList, params Expression<Func<T, object>>[] expressionList)        {            var query = GetAllWithRelated(predicateList, expressionList);            if (sortOrderDir != null && orderBy != null)            {                if (sortOrderDir == true)                {                    query = query.OrderBy(orderBy);                }                else                {                    query = query.OrderBy(orderBy + " DESC");                }            }            if (pageIndex != null && pageSize != null)            {                query = query.Skip(((int)pageIndex - 1) * (int)pageSize).Take((int)pageSize).AsQueryable();            }            return query;        }        public async Task<T> SingleAsync(Expression<Func<T, bool>> predicate)        {            return await GetAll(null).SingleAsync(predicate);        }        public async Task<T> FirstOrDefaultAsync(Expression<Func<T, bool>> predicate)        {            return await GetAll(null).FirstOrDefaultAsync(predicate);        }        public T GetById(object id)        {            return table.Find(id);        }        public void Insert(T obj)        {            table.Add(obj);        }        public void Update(T obj)        {            table.Attach(obj);        }        public void Delete(object id)        {            T existing = table.Find(id);            table.Remove(existing);        }        public void DeleteComposite(object first, object second)        {            T existing = table.Find(first, second);            table.Remove(existing);        }

        public void DeleteAll()        {            table.ForEachAsync<T>(x=>table.Remove(x));        }    }}